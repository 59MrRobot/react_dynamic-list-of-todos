{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","useState","query","setQuery","filter","setFilter","selectedTodoId","setselectedTodoId","filteredTodos","todo","title","toLowerCase","includes","completed","className","type","placeholder","value","onChange","event","target","map","cn","checked","readOnly","id","onClick","userId","API_URL","getUser","fetch","then","response","json","CurrentUser","selectedUser","setSelectedUser","loadUser","useCallback","a","loadedUser","useEffect","name","email","phone","App","setTodos","selectedUserId","setSelectedUserId","loadTodos","loadedTodos","selectHandler","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1150dbf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  onSelect: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState('all');\n  const [selectedTodoId, setselectedTodoId] = useState(0);\n\n  let filteredTodos = todos.filter(todo => (\n    todo.title.toLowerCase()\n      .includes(query.toLowerCase())\n  ));\n\n  switch (filter) {\n    case 'active':\n      filteredTodos = filteredTodos.filter(todo => todo.completed === false);\n      break;\n    case 'completed':\n      filteredTodos = filteredTodos.filter(todo => todo.completed === true);\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"Filter by title\"\n        data-cy=\"filterByTitle\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n\n      <select\n        value={filter}\n        onChange={(event) => setFilter(event.target.value)}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Not Completed</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={cn(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={cn(\n                  'button',\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                    todo.id === selectedTodoId,\n                  },\n                )}\n                data-cy=\"userButton\"\n                onClick={() => {\n                  onSelect(todo.userId);\n                  setselectedTodoId(todo.id);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  onSelect: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  onSelect,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const loadUser = useCallback(async () => {\n    try {\n      const loadedUser = await getUser(userId);\n\n      if (loadedUser.id) {\n        setSelectedUser(loadedUser);\n      }\n    } catch {\n      setSelectedUser(null);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    loadUser();\n  }, [userId]);\n\n  return selectedUser\n    ? (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${selectedUser?.id}`}</span>\n        </h2>\n\n        <h3\n          className=\"CurrentUser__name\"\n          data-cy=\"userName\"\n        >\n          {selectedUser?.name}\n        </h3>\n        <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={() => onSelect(0)}\n        >\n          Clear\n        </button>\n      </div>\n    )\n    : (<p>User does not exist</p>);\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const loadTodos = async () => {\n    const loadedTodos = await getTodos();\n\n    setTodos(loadedTodos);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const selectHandler = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onSelect={selectHandler}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSelect={selectHandler}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}